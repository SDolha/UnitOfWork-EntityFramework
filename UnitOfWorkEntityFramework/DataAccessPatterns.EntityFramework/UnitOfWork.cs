using System;
using System.Data.Entity.Infrastructure;
using DataAccessPatterns.Contracts;

namespace DataAccessPatterns.EntityFramework
{
    /// <summary>
    /// Implements <see cref="IUnitOfWork"/> over <see cref="IObjectContextAdapter"/> which is the interface implemented by database context objects generated by Entity Framework.
    /// </summary>
    public class UnitOfWork : IUnitOfWork
    {
        /// <summary>
        /// Initializes a unit of work object.
        /// </summary>
        /// <param name="objectContextAdapter">The object context adapter to bind the unit of work to.</param>
        public UnitOfWork(IObjectContextAdapter objectContextAdapter)
        {
            if (objectContextAdapter == null)
                throw new ArgumentNullException("objectContextAdapter");
            ObjectContextAdapter = objectContextAdapter;
        }

        /// <summary>
        /// The object context adapter that the unit of work is bound to.
        /// </summary>
        protected IObjectContextAdapter ObjectContextAdapter { get; private set; }

        /// <summary>
        /// Notifies the unit of work object that the specified entity is new and should actually be added to the data store upon committing the changes.
        /// <see cref="UnitOfWork"/> implementation executes no operation, since database context objects records changes automatically itself.
        /// </summary>
        /// <param name="item">The entity to register as new.</param>
        public void RegisterNew(object item) { }

        /// <summary>
        /// Notifies the unit of work object that the specified entity is modified and should actually be updated in the data store upon committing the changes.
        /// <see cref="UnitOfWork"/> implementation executes no operation, since database context objects records changes automatically itself.
        /// </summary>
        /// <param name="item">The entity to register as dirty.</param>
        public void RegisterDirty(object item) { }

        /// <summary>
        /// Notifies the unit of work object that the specified entity is not modified and should be preserved as is in the data store upon committing the changes.
        /// <see cref="UnitOfWork"/> implementation executes no operation, since database context objects records changes automatically itself.
        /// </summary>
        /// <param name="item">The entity to register as clean.</param>
        public void RegisterClean(object item) { }

        /// <summary>
        /// Notifies the unit of work object that the specified entity is deleted and should actually be removed from the data store upon committing the changes.
        /// <see cref="UnitOfWork"/> implementation executes no operation, since database context objects records changes automatically itself.
        /// </summary>
        /// <param name="item">The entity to register as deleted.</param>
        public void RegisterDeleted(object item) { }

        /// <summary>
        /// Commits changes registered on the unit of work object by performing actual insert, update, and delete operations on the data store.
        /// <see cref="UnitOfWork"/> implementation executes SaveChanges operation on the underlying database context object.
        /// </summary>
        public void Commit()
        {
            var objectContext = ObjectContextAdapter.ObjectContext;
            if (objectContext == null)
                throw new InvalidOperationException("ObjectContext is not defined, and therefore Save cannot be completed.");
            objectContext.SaveChanges();
        }

        /// <summary>
        /// Rolls back th unit of work object to its initial state.
        /// <see cref="UnitOfWork"/> implementation does not support rolling back.
        /// </summary>
        /// <exception cref="NotSupportedException"/>
        public void Rollback()
        {
            throw new NotSupportedException();
        }
    }
}
