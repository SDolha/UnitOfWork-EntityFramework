using System;
using System.Data.Entity.Infrastructure;
using DataAccessPatterns.Contracts;

namespace DataAccessPatterns.EntityFrameworkImplementation
{
    // Implements IUnitOfWork over IObjectContextAdapter, the interface implemented by database context objects generated by Entity Framework.
    public class EntityFrameworkUnitOfWork : IUnitOfWork
    {        
        public EntityFrameworkUnitOfWork(IObjectContextAdapter objectContextAdapter)
        {
            if (objectContextAdapter == null)
                throw new ArgumentNullException("objectContextAdapter");

            this.objectContextAdapter = objectContextAdapter;
        }

        private IObjectContextAdapter objectContextAdapter;
        public IObjectContextAdapter ObjectContextAdapter
        {
            get { return objectContextAdapter; }
        }

        // Change notifications methods, actions not needed when using IObjectContextAdapter (of Entity Framework) but we need to define them as we implement IUnitOfWork.
        public void RegisterNew(object entity) { }
        public void RegisterDirty(object entity) { }
        public void RegisterClean(object entity) { }
        public void RegisterDeleted(object entity) { }

        // Commit method, action delegated as a SaveChanges call on the code object context (of EntityFramework) adapted by object context adapter (database context object).
        public void Commit()
        {
            var objectContext = objectContextAdapter.ObjectContext;
            if (objectContext == null)
                throw new InvalidOperationException("ObjectContext is not defined, and therefore Save cannot be completed.");

            objectContext.SaveChanges();
        }

        // Rollback method is not supported; to ignore changes, simply do not call SaveChanges and create a different unit of work instance.
        public void Rollback()
        {
            throw new NotSupportedException();
        }
    }
}
